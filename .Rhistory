filepath<-("http://thda.com/sthda/RDoc/example-files/martin-luther-king-i-have-a-dream-speech.txt")
text<- readline(filepath)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
filepath<-("http://sthda.com/sthda/RDoc/example-files/martin-luther-king-i-have-a-dream-speech.txt")
text<- readline(filepath)
df1 = data.frame(ID = c(1,2,3,4,5),var1 = c('a','b','c','d','e'),var2 = c(1,1,0,0,1))
df1
df2 = data.frame(x= sample(1:3,15,repace = TRUE))
df2 = data.frame(x= sample(1:3,15,replace = TRUE))
df2
df2 = data.frame(x= sample(1:3,18,replace = TRUE))
df2
hist(df2)
as.vector(df2)
hist(as.vector(df2))
set.seed(1)
rnorm(15)
ifelse(sign(rnorm(18))==-1,0,1)
rnorm(18)
mydata = sample(LETTERS)
mydata = sample(LETTERS(1:5),16,replace = TRUE)
mydata = sample(LETTERS[1:5],16,replace = TRUE)
mydata
plot(mydata)
hist(mydata)
uref = 0.3*280/2500
MF = 24
lluvia = 45.29
Delta = 0.12*lluvia/MF
ulluvia = 10^(11.628*(-0.546+sqrt(0.2981+0.172*log10(Delta))))
e
1/19
float(1/19)
a = 1/19
# I recommend "pacman" for managing add-on packages. It will
# install packages, if needed, and then load the packages.
install.packages("pacman")
R.version
install.packages("installr")
A = matrix (c(2,0,0,0,-4,2,0,0,2,-1,1,1,-2,2,0,-2),ncol = 4)
A
## Halle la inversa de esta matriz
solve(A)
## Halle la traza de la inversa
sum(diag(solve(A)))
## Calcule sus autovectores y autovalores
eigen(A)
### Ejercicio 4 ###
set.seed(1)
B = matrix(rgeom(n=9,0.74) ,ncol = 3) # Creamos la matrix aleatoria 3x3
B
### Ejercicio 4 ###
set.seed(1)
B = matrix(rgeom(n=9,0.74) ,ncol = 3) # Creamos la matrix aleatoria 3x3
B
### Ejercicio 4 ###
set.seed(12)
B = matrix(rgeom(n=9,0.74) ,ncol = 3) # Creamos la matrix aleatoria 3x3
B
### Ejercicio 4 ###
set.seed(12)
B = matrix(rgeom(n=9,0.74) ,ncol = 3) # Creamos la matrix aleatoria 3x3
det(B) #determinante
sum(diag(B)) #Traza
eigen_vals = unlist(eigen(B)[1],use.names= FALSE )
sum(eigen_vals) ==sum(diag(B)) # la suma de los autoovalores es igual a la traza
prod(eigen_vals) == det(B) # La multiplicacion de los autovalores es igual al determinante
B
### Ejercicio 5 ###
library(MASS)
set.seed(1)
n = 1000
mu = c(1,3)
expo = rexp(2,4)
sigma = matrix(c(expo[1],expo[2],expo[2],expo[1]),ncol = 2)
datos = mvrnorm(n,mu,sigma)
plot(datos,pch=".")
# Estimamos la media y la matrix de covarianzas
med_muest= colMeans(datos)
cov_muest = cov(datos)
# Calculamos la distancia de Mahalanobis
dist = mahalanobis(datos,med_muest,cov_muest)
mean(dist)
sd(dist)
hist(dist, main = "Distancia de Mahalanobis",probability = TRUE)
lines(density(dist),col="red")
### Ejercicio 5 ###
library(MASS)
set.seed(1)
n = 1000
mu = c(1,3)
expo = rexp(2,4)
sigma = matrix(c(expo[1],expo[2],expo[2],expo[1]),ncol = 2)
datos = mvrnorm(n,mu,sigma)
### Ejercicio 5 ###
library(MASS)
n = 1000
mu = c(1,3)
expo = rexp(2,4)
sigma = matrix(c(expo[1],expo[2],expo[2],expo[1]),ncol = 2)
datos = mvrnorm(n,mu,sigma)
expo
datos = mvrnorm(n,mu,sigma)
plot(datos,pch=".")
sigma
### Ejercicio 5 ###
library(MASS)
n = 1000
mu = c(1,3)
expo = rexp(2,4)
expo
sigma = matrix(c(expo[1],expo[2],expo[2],expo[1]),ncol = 2)
sigma
datos = mvrnorm(n,mu,sigma)
plot(datos,pch=".")
# Estimamos la media y la matrix de covarianzas
med_muest= colMeans(datos)
med_muest
cov_muest = cov(datos)
cov_muest
# Calculamos la distancia de Mahalanobis
dist = mahalanobis(datos,med_muest,cov_muest)
mean(dist)
sd(dist)
hist(dist, main = "Distancia de Mahalanobis",probability = TRUE)
lines(density(dist),col="red")
### Ejercicio 5 ###
library(MASS)
n = 1000
mu = c(1,3)
expo = rexp(2,4)
expo
sigma = matrix(c(expo[1],expo[2],expo[2],expo[1]),ncol = 2)
sigma
datos = mvrnorm(n,mu,sigma)
plot(datos,pch=".")
# Estimamos la media y la matrix de covarianzas
med_muest= colMeans(datos)
med_muest
cov_muest = cov(datos)
cov_muest
# Calculamos la distancia de Mahalanobis
dist = mahalanobis(datos,med_muest,cov_muest)
mean(dist)
sd(dist)
hist(dist, main = "Distancia de Mahalanobis",probability = TRUE)
lines(density(dist),col="red")
### Ejercicio 5 ###
library(MASS)
n = 1000
mu = c(1,3)
expo = rexp(2,4)
expo
sigma = matrix(c(expo[1],expo[2],expo[2],expo[1]),ncol = 2)
sigma
datos = mvrnorm(n,mu,sigma)
plot(datos,pch=".")
# Estimamos la media y la matrix de covarianzas
med_muest= colMeans(datos)
med_muest
cov_muest = cov(datos)
cov_muest
# Calculamos la distancia de Mahalanobis
dist = mahalanobis(datos,med_muest,cov_muest)
mean(dist)
sd(dist)
hist(dist, main = "Distancia de Mahalanobis",probability = TRUE)
lines(density(dist),col="red")
### Ejercicio 5 ###
library(MASS)
n = 1000
mu = c(1,3)
expo = rexp(2,4)
expo
sigma = matrix(c(expo[1],expo[2],expo[2],expo[1]),ncol = 2)
sigma
datos = mvrnorm(n,mu,sigma)
plot(datos,pch=".")
# Estimamos la media y la matrix de covarianzas
med_muest= colMeans(datos)
med_muest
cov_muest = cov(datos)
cov_muest
# Calculamos la distancia de Mahalanobis
dist = mahalanobis(datos,med_muest,cov_muest)
hist(dist, main = "Distancia de Mahalanobis",probability = TRUE)
lines(density(dist),col="red")
### Ejercicio 5 ###
library(MASS)
n = 1000
mu = c(1,3)
expo = rexp(2,4)
expo
sigma = matrix(c(expo[1],expo[2],expo[2],expo[1]),ncol = 2)
sigma
datos = mvrnorm(n,mu,sigma)
plot(datos,pch=".")
# Estimamos la media y la matrix de covarianzas
med_muest= colMeans(datos)
med_muest
cov_muest = cov(datos)
cov_muest
# Calculamos la distancia de Mahalanobis
dist = mahalanobis(datos,med_muest,cov_muest)
hist(dist, main = "Distancia de Mahalanobis",probability = TRUE)
lines(density(dist),col="red")
### Ejercicio 5 ###
library(MASS)
n = 1000
mu = c(1,3)
expo = rexp(2,4)
expo
sigma = matrix(c(expo[1],expo[2],expo[2],expo[1]),ncol = 2)
sigma
datos = mvrnorm(n,mu,sigma)
plot(datos,pch=".")
# Estimamos la media y la matrix de covarianzas
med_muest= colMeans(datos)
med_muest
cov_muest = cov(datos)
cov_muest
# Calculamos la distancia de Mahalanobis
dist = mahalanobis(datos,med_muest,cov_muest)
hist(dist, main = "Distancia de Mahalanobis",probability = TRUE)
lines(density(dist),col="red")
sigma%*%sigma
sigma = sigma%*%sigma
sigma = sigma%*%sigma
sigma = sigma%*%sigma
sigma = sigma%*%sigma
sigma
sigma = sigma%*%sigma
sigma = sigma%*%sigma
sigma = sigma%*%sigma
sigma = sigma%*%sigma
sigma = sigma%*%sigma
sigma
### Ejercicio 5 ###
library(MASS)
n = 1000
mu = c(1,3)
expo = rexp(2,4)
expo
sigma = matrix(c(expo[1],expo[2],expo[2],expo[1]),ncol = 2)
sigma
datos = mvrnorm(n,mu,sigma)
plot(datos,pch=".")
# Estimamos la media y la matrix de covarianzas
med_muest= colMeans(datos)
med_muest
cov_muest = cov(datos)
cov_muest
# Calculamos la distancia de Mahalanobis
dist = mahalanobis(datos,med_muest,cov_muest)
hist(dist, main = "Distancia de Mahalanobis",probability = TRUE)
lines(density(dist),col="red")
hist(dist, main = "Distancia de Mahalanobis",probability = TRUE, xlab = 'dist', ylab = 'frequency')
lines(density(dist),col="red")
plot(datos,pch=".")
points(datos[dist>2],pch='.',col ="red
")
plot(datos,pch=".")
points(datos[dist>2],pch='.',col ="red")
points(datos[dist>2,],pch='.',col ="red")
sigi = matrix(c(1,0.35,0.35,1), ncol = 2)
sigi
det(sigi)
solve(sigi)
sigi
sqrt(det(sigi))
n = 10000
a = rgeom(n,0.74)
hist(a)
plot(a)
a = rgeom(9,0.74)
a
a = rgeom(n,0.74)
a
hist(a)
a = rgeom(n,3)
a = rgeom(n,1)
hist(a)
a = rgeom(n,0.2)
hist(a)
a = rgeom(n,0.02)
hist(a)
a = rgeom(n,0.74)
hist(a)
line(a)
lines(density(a),col = 'red')
lines(a,col = 'red')
n = 1000000
a = rgeom(n,0.74)
hist(a)
dgeom(5,0.74)
dgeom(5,0.74,n=3)
dgeom(5,0.74)
dgeom(5,0.74)
dgeom(5,0.74)
dgeom(5,0.74)
dgeom(5,0.74)
dgeom(5,0.74)
dgeom(5,0.74)
pgeom(0.1,0.74)
pgeom(0.1,0.74)
pgeom(0.1,0.74)
a = 1:10
a
dgeom(a,0.74)
b = dgeom(a,0.74)
plot(b)
hist(b)
a = 1:1000
b = dgeom(a,0.74)
hist(b)
b
b = pgeom(a,0.74)
b
b = qgeom(a,0.74)
b = rgeom(a,0.74)
b
hist(a)
hist(b)
runif(a)
b = runif(a)
hist(b)
n = 1000000
b = runif(n)
hist(b)
b
rgeom(n,0.45)
rgeom(n,0.01)
b = rgeom(n,0.01)
hist(b)
setwd("~/Escritorio/analisis de datos/proyecto 1")
setwd("~/Escritorio/analisis de datos/proyecto 1")
setwd("~/Escritorio/analisis de datos/proyecto 1")
clase = as.data.frame(read.csv("StudentsPerformance.csv",header = T))
head(clase)
attach(clase)
# Buscamos que porcentaje, si es minoria o no entro de la clase, el grupo nalizar ico C
race = 2 #por querer analizar al grupo 3
group = 3
representation <- table(clase[race])
barplot(representation,names.arg =c("Grupo A","Grupo B","Grupo C","Grupo D","Grupo E"))
percentage = representation[group]*100/sum(representation)
# Ahora seleccionamos solo los alumnos de la raza C
raceC = clase[clase$race.ethnicity == "group C",]
head(raceC)
install.packages("ggpolot2")
install.packages("ggplot2")
library(ggplot2)
getwd()
setwd(getwd())
getwd()
setwd(getwd())
clase = as.data.frame(read.csv("StudentsPerformance.csv",header = T))
setwd(getwd())
clase = as.data.frame(read.csv("Data/StudentsPerformance.csv",header = T))
head(clase)
attach(clase)
# Buscamos que porcentaje, si es minoria o no entro de la clase, el grupo nalizar ico C
race = 2 #por querer analizar al grupo 3
group = 3
representation <- table(clase[race])
head(rrepresentation)
head(representation)
ggplot(data=representation, aes(x=dose,y=len))+
geom_bar(stat="identity",fill = "grey")+
geom_text(aes(label=len),vjust=-0.3,size=3.5)+
theme_minimal()
ggplot2(data=representation, aes(x=dose,y=len))+
geom_bar(stat="identity",fill = "grey")+
geom_text(aes(label=len),vjust=-0.3,size=3.5)+
theme_minimal()
library(ggplot2)
ggplot2(data=representation, aes(x=dose,y=len))+
geom_bar(stat="identity",fill = "grey")+
geom_text(aes(label=len),vjust=-0.3,size=3.5)+
theme_minimal()
ggplot(data=representation, aes(x=dose,y=len))+
geom_bar(stat="identity",fill = "grey")+
geom_text(aes(label=len),vjust=-0.3,size=3.5)+
theme_minimal()
ggplot(data=clase[race], aes(x=dose,y=len))+
geom_bar(stat="identity",fill = "grey")+
geom_text(aes(label=len),vjust=-0.3,size=3.5)+
theme_minimal()
ggplot(data=clase[race], aes(x=c("Grupo A","Grupo B","Grupo C","Grupo D","Grupo E"),y=len))+
geom_bar(stat="identity",fill = "grey")+
geom_text(aes(label=len),vjust=-0.3,size=3.5)+
theme_minimal()
str(clase[2])
p<-ggplot(clase[2])
p
ggplot(clase[2])
theme_minimal()
g<-ggplot(clase[2])
g+geom_bar()
clase = as.data.frame(read.csv("Data/StudentsPerformance.csv",header = T))
head(clase)
attach(clase)
# Buscamos que porcentaje, si es minoria o no entro de la clase, el grupo nalizar ico C
race = 2 #por querer analizar al grupo 3
group = 3
representation <- table(clase[race])
barplot(representation,names.arg =c("Grupo A","Grupo B","Grupo C","Grupo D","Grupo E"))
percentage = representation[group]*100/sum(representation)
# Ahora seleccionamos solo los alumnos de la raza C
raceC = clase[clase$race.ethnicity == "group C",]
head(raceC)
barplot(representation,names.arg =c("Grupo A","Grupo B","Grupo C","Grupo D","Grupo E"),main = "Representacion del salon por raza etnica")
prop.table(representation,names.arg =c("Grupo A","Grupo B","Grupo C","Grupo D","Grupo E"),main = "Representacion del salon por raza etnica")
prop.table(representation,margin = 2)*100
prop.table(table(representation),margin = 2)*100
prop.table(table(clase[2]),margin = 2)*100
meds <- scale(representation,FALSE,colSums(representation))*100
meds <- scale(as.array(representation),FALSE,colSums(representation))*100
representation <- table(clase[race])
barplot(representation,names.arg =c("Grupo A","Grupo B","Grupo C","Grupo D","Grupo E"),main = "Representacion del salon por raza etnica")
percentage = representation[group]*100/sum(representation)
abline(h=0)
text(bp, representation/2,labels = round(representation,digits = 1))
bp <- barplot(representation,names.arg =c("Grupo A","Grupo B","Grupo C","Grupo D","Grupo E"),main = "Representacion del salon por raza etnica")
abline(h=0)
text(bp, representation/2,labels = round(representation,digits = 1))
text(bp, representation/2,labels = round(representation*100/(sum(representation)),digits = 1))
setwd(getwd())
clase = as.data.frame(read.csv("Data/StudentsPerformance.csv",header = T))
head(clase)
attach(clase)
# Buscamos que porcentaje, si es minoria o no entro de la clase, el grupo nalizar ico C
race = 2 #por querer analizar al grupo 3
group = 3
representation <- table(clase[race])
bp <- barplot(representation,names.arg =c("Grupo A","Grupo B","Grupo C","Grupo D","Grupo E"),main = "Representacion del salon por raza etnica")
abline(h=0)
text(bp, representation/2,labels = round(representation*100/(sum(representation)),digits = 1))
bp <- barplot(representation,names.arg =c("Grupo A","Grupo B","Grupo C","Grupo D","Grupo E"),main = "Representacion del salon por raza etnica")
abline(h=0)
text(bp, representation/3,labels = round(representation*100/(sum(representation)),digits = 1))
text(bp, representation/2,labels = round(representation*100/(sum(representation)),digits = 1))
# Buscamos que porcentaje, si es minoria o no entro de la clase, el grupo nalizar ico C
race = 2 #por querer analizar al grupo 3
group = 3
representation <- table(clase[race])
bp <- barplot(representation,names.arg =c("Grupo A","Grupo B","Grupo C","Grupo D","Grupo E"),main = "Representacion del salon por raza etnica")
abline(h=0)
text(bp, representation/2,labels = round(representation*100/(sum(representation)),digits = 1))
# Ahora seleccionamos solo los alumnos de la raza C
raceC = clase[clase$race.ethnicity == "group C",]
head(raceC)
raceC$test.preparation.course == "completed"
raceC[raceC$test.preparation.course == "completed",raceC$math.score > max(raceC$math.score)/2,]
raceC[raceC$test.preparation.course == "completed",raceC$math.score => max(raceC$math.score)/2,]
raceC[raceC$test.preparation.course == "completed",raceC$math.score > max(raceC$math.score)/2,]
raceC
raceC[raceC$test.preparation.course == completed,raceC$math.score > max(raceC$math.score)/2,]
str(raceC)
clase[clase$race.ethnicity == "group C",clase$math.score > 10,]
clase[clase$race.ethnicity == "group C" && clase$math.score > 10,]
clase[clase$race.ethnicity == "group C" ^ clase$math.score > 10,]
clase[clase$race.ethnicity == "group C" and clase$math.score > 10,]
raceC[raceC$math.score > 15]
raceC[raceC$math.score < 15]
raceC[raceC$math.score < 15,]
raceC[raceC$math.score > 15,]
length(raceC)
# Ahora seleccionamos solo los alumnos de la raza C
raceC = clase[clase$race.ethnicity == "group C",]
length(raceC)
raceC[raceC$math.score > 15,]
head(raceC)
raceC[raceC$math.score > 15,raceC$gender == "female",]
raceC[raceC$math.score > 15,raceC$gender == 'female',]
raceC[raceC$math.score > 15 & raceC$gender == 'female',]
raceC[raceC$test.preparation.course == "completed"&raceC$math.score > max(raceC$math.score)/2,]
a = raceC[raceC$test.preparation.course == "completed"&raceC$math.score > max(raceC$math.score)/2,]
lengh
lengh(a)
lenght(a)
length(a)
sizeof(a)
str(a)
View(clase)
a = raceC[raceC$test.preparation.course == "completed"&raceC$math.score > max(raceC$math.score)/2 & raceC$parental.level.of.education == 'high school']
a = raceC[raceC$test.preparation.course == "completed"&raceC$math.score > max(raceC$math.score)/2 & raceC$parental.level.of.education == 'high school',]
head(a)
str(a)
a = raceC[raceC$test.preparation.course == "none"&raceC$math.score > max(raceC$math.score)/2 & raceC$parental.level.of.education == 'high school',]
head(a)
str(a)
max(raceC$math.score)
colMeans(raceC[,4])
colMeans(raceC[4,6])
colMeans(raceC[:,6])
raceC[,1]
raceC[1,]
raceC[,2:6]
raceC[,6:8]
colMeans(raceC[,6:8])
var(raceC[,6:8])
sqrt(var(raceC[,6:8]))
colMeans(raceC[race$gender == 'female',][,6:8])
raceC[raceC$gender == 'male']
raceC[raceC$gender == 'male',]
raceC[raceC$gender == 'male',][,6:8]
colMeans(clase[clase$race.ethnicity == "group C",])
colMeans(raceC[raceC$gender == 'female',][,6:8])
colMeans(raceC[raceC$gender == 'male',][,6:8])
